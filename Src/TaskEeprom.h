#ifndef TASK_EEPROM_H
#define TASK_EEPROM_H

#include <stdint.h>
#include <stdbool.h>
#include "Eeprom.h"

#define EEPROM_VIRTUAL_ADDR_BEGIN   0   
#define MAX_EEPROM_ADDRESS        255

typedef uint32_t EEPROM_DATA;

typedef enum
{
    ENABLE_MEASURE_ADDR    = EEPROM_VIRTUAL_ADDR_BEGIN,
    VOLTAGE_MEASURE_ADDR,
    ADC_OFFSET_ADDR,   
    SOGLIE_ALLARMI_IO_ADDR, 
    SOGLIE_ALLARMI_IU_ADDR =  SOGLIE_ALLARMI_IO_ADDR + STR_SIZE,
    SOGLIE_ALLARMI_PO_ADDR =  SOGLIE_ALLARMI_IU_ADDR + STR_SIZE,
    SOGLIE_ALLARMI_PU_ADDR =  SOGLIE_ALLARMI_PO_ADDR + STR_SIZE,
    SOGLIE_ALLARMI_EO_ADDR =  SOGLIE_ALLARMI_PU_ADDR + STR_SIZE,
    SOGLIE_ALLARMI_EU_ADDR =  SOGLIE_ALLARMI_EO_ADDR + STR_SIZE,
    ENERGIA_ADDR           =  SOGLIE_ALLARMI_EU_ADDR + STR_SIZE,
    LOG_MESAURE_ADDR = 66,
    ENABLE_SCREENSAVER_ADDR,
    SCREENSAVER_TYPE_ADDR,
    LED_CONF_ADDR,
    SCREEN_SAVER_TIMER_ADDR ,
    ENABLE_SIMULATION_ADDR ,
    FREQUENCY_SIM_ADDR ,
    ENABLE_LOG_ADDR ,
    CURRENT_ALARM_OCCURRENCE_ADDR ,
    POWER_ALARM_OCCURRENCE_ADDR ,
    ENERGY_ALARM_OCCURRENCE_ADDR ,
    ADDR_77 ,
    ADDR_78 ,
    ADDR_79 ,
    ADDR_80 ,
    ADDR_81 ,
    ADDR_82 ,
    ADDR_83 ,
    ADDR_84 ,
    ADDR_85 ,
    ADDR_86 ,
    ADDR_87 ,
    ADDR_88 ,
    ADDR_89 ,
    ADDR_90 ,
    ADDR_91 ,
    ADDR_92 ,
    ADDR_93 ,
    ADDR_94 ,
    ADDR_95 ,
    ADDR_96 ,
    ADDR_97 ,
    ADDR_98 ,
    ADDR_99 ,
    ADDR_100,
    ADDR_101,
    ADDR_102,
    ADDR_103,
    ADDR_104,
    ADDR_105,
    ADDR_106,
    ADDR_107,
    ADDR_108,
    ADDR_109,
    ADDR_110,
    ADDR_111,
    ADDR_112,
    ADDR_113,
    ADDR_114,
    ADDR_115,
    ADDR_116,
    ADDR_117,
    ADDR_118,
    ADDR_119,
    ADDR_120,
    ADDR_121,
    ADDR_122,
    ADDR_123,
    ADDR_124,
    ADDR_125,
    ADDR_126,
    ADDR_127,
    ADDR_128,
    ADDR_129,
    ADDR_130,
    ADDR_131,
    ADDR_132,
    ADDR_133,
    ADDR_134,
    ADDR_135,
    ADDR_136,
    ADDR_137,
    ADDR_138,
    ADDR_139,
    ADDR_140,
    ADDR_141,
    ADDR_142,
    ADDR_143,
    ADDR_144,
    ADDR_145,
    ADDR_146,
    ADDR_147,
    ADDR_148,
    ADDR_149,              // FINE BLOCCO PARAMETRI
    CURRENT_SIM_ADDR_0,    // INIZIO SALVATAGGIO VALORI (posso salvare 11 float)
    CURRENT_SIM_ADDR_1,    
    CURRENT_SIM_ADDR_2,
    CURRENT_SIM_ADDR_3,
    CURRENT_SIM_ADDR_4,
    CURRENT_SIM_ADDR_5,
    CURRENT_SIM_ADDR_6,
    CURRENT_SIM_ADDR_7,
    CURRENT_SIM_FACTOR_ADDR_8,
    MAX_CURRENT_0_ADDR,
    MAX_CURRENT_1_ADDR,
    MAX_CURRENT_2_ADDR,
    MAX_CURRENT_3_ADDR,
    MAX_CURRENT_4_ADDR,
    MAX_CURRENT_5_ADDR,
    MAX_CURRENT_6_ADDR,
    MAX_CURRENT_7_ADDR,
    MAX_CURRENT_FACTOR_8_ADDR,
    MIN_CURRENT_0_ADDR,
    MIN_CURRENT_1_ADDR,
    MIN_CURRENT_2_ADDR,
    MIN_CURRENT_3_ADDR,
    MIN_CURRENT_4_ADDR,
    MIN_CURRENT_5_ADDR,
    MIN_CURRENT_6_ADDR,
    MIN_CURRENT_7_ADDR,
    MIN_CURRENT_FACTOR_8_ADDR,
    MAX_POWER_0_ADDR,
    MAX_POWER_1_ADDR,
    MAX_POWER_2_ADDR,
    MAX_POWER_3_ADDR,
    MAX_POWER_4_ADDR,
    MAX_POWER_5_ADDR,
    MAX_POWER_6_ADDR,
    MAX_POWER_7_ADDR,
    MAX_POWER_FACTOR_8_ADDR,
    MIN_POWER_0_ADDR,
    MIN_POWER_1_ADDR,
    MIN_POWER_2_ADDR,
    MIN_POWER_3_ADDR,
    MIN_POWER_4_ADDR,
    MIN_POWER_5_ADDR,
    MIN_POWER_6_ADDR,
    MIN_POWER_7_ADDR,
    MIN_POWER_FACTOR_8_ADDR,
    ADDR_195,
    ADDR_196,
    ADDR_197,
    ADDR_198,
    ADDR_199,
    ADDR_200,
    ADDR_201,
    ADDR_202,
    ADDR_203,
    ADDR_204,
    ADDR_205,
    ADDR_206,
    ADDR_207,
    ADDR_208,
    ADDR_209,
    ADDR_210,
    ADDR_211,
    ADDR_212,
    ADDR_213,
    ADDR_214,
    ADDR_215,
    ADDR_216,
    ADDR_217,
    ADDR_218,
    ADDR_219,
    ADDR_220,
    ADDR_221,
    ADDR_222,
    ADDR_223,
    ADDR_224,
    ADDR_225,
    ADDR_226,
    ADDR_227,
    ADDR_228,
    ADDR_229,
    ADDR_230,
    ADDR_231,
    ADDR_232,
    ADDR_233,
    ADDR_234,
    ADDR_235,
    ADDR_236,
    ADDR_237,
    ADDR_238,
    ADDR_239,
    ADDR_240,
    ADDR_241,
    ADDR_242,
    ADDR_243,
    ADDR_244,
    ADDR_245,
    ADDR_246,
    ADDR_247,
    ADDR_248,
    ADDR_249,   // FINE SALVATAGGIO VALORI
    ADDR_250, 
    
    NUMBER_OF_WRITES_ADDR  =  MAX_EEPROM_ADDRESS - U_INT32_SIZE,  // 251
    ADDR_252,
    ADDR_253,
    ADDR_254,
    ADDR_255
}EEPROM_ADDRESS;




enum
{
    CURRENT_THR_FLAG = 0,
    POWER_THR_FLAG      ,
    ENERGY_THR_FLAG
};

typedef struct
{
    bool SaveParameters;
    bool SaveAlarmOccurrence;
    bool SaveThresholds;
    bool SaveEnergy;
    bool SaveCurrentSim;
    bool SaveMaxMinCurrent;
    bool SaveMaxMinPower;
    bool EraseAll;
    bool SaveAll;
}FLAG_EEPROM;

extern FLAG_EEPROM EepFlag;
extern EEPROM_DATA EepromSavedValue[];

void TaskEeprom(void const * argument);
#endif